version: '3'
volumes: 
  mapic_data_store_localhost:
  mongo_store_localhost:
  postgis_store_localhost:
  redis_layers_store_localhost:
  redis_stats_store_localhost:
  redis_tokens_store_localhost:

networks:
  mapic:

services:
  engine:
    image: mapic/geo:latest 
    environment:
      MAPIC_DOMAIN: ${MAPIC_DOMAIN}
      MAPIC_PRODMODE: 'false'
    deploy:
      placement:
        constraints: [node.labels.domain_node == true]
    working_dir: /mapic/engine 
    command: ./start-server.sh
    volumes:
      - ${MAPIC_CONFIG_FOLDER}:/mapic/config
      - ${MAPIC_ROOT_FOLDER}/engine:/mapic/engine
      - ${MAPIC_ROOT_FOLDER}/mapic.js:/mapic/mapic.js
      - mapic_data_store_localhost:/data
    networks:
      mapic:
        aliases:
          - engine.docker

  mile: 
    image: mapic/geo:latest
    environment:
      MAPIC_DOMAIN: ${MAPIC_DOMAIN}
      MAPIC_PRODMODE: 'false'
      MAPIC_REDIS_AUTH: ${MAPIC_REDIS_AUTH}
    deploy:
      placement:
        constraints: [node.labels.mile == true]
    working_dir: /mapic/mile 
    command: ./start-server.sh
    volumes:
      # - ${MAPIC_CONFIG_FOLDER}:/mapic/config
      - ${MAPIC_ROOT_FOLDER}/mile:/mapic/mile
      - mapic_data_store_localhost:/data
    networks:
      mapic:
        aliases:
          - mile.docker
  
  nginx:
    image: mapic/nginx:latest
    volumes:
      - ${MAPIC_CONFIG_FOLDER}:/mapic/config
    deploy:
      placement:
        constraints: [node.labels.domain_node == true]
    command: "nginx -c /mapic/config/nginx.conf"
    ports:
      - 443:443
      - 80:80
    networks:
      mapic:
        aliases:
          - nginx.docker

  redislayers:
    image: redis:latest
    volumes:
      - ${MAPIC_CONFIG_FOLDER}:/mapic/config
      - redis_layers_store_localhost:/data
    deploy:
      placement:
        # constraints: [node.role == manager]
        constraints: [node.labels.domain_node == true]
    command: "redis-server /mapic/config/redis.layers.conf"
    networks:
      mapic:
        aliases:
          - redislayers.docker

  redisstats:
    image: redis:latest
    volumes:
      - ${MAPIC_CONFIG_FOLDER}:/mapic/config
      - redis_stats_store_localhost:/data
    deploy:
      placement:
        constraints: [node.labels.domain_node == true]
        # constraints: [node.role == manager]
    command: "redis-server /mapic/config/redis.stats.conf"
    networks:
      mapic:
        aliases:
          - redisstats.docker

  redistokens:
    image: redis:latest
    volumes:
      - ${MAPIC_CONFIG_FOLDER}:/mapic/config
      - redis_tokens_store_localhost:/data
    deploy:
      placement:
        constraints: [node.labels.domain_node == true]
        # constraints: [node.role == manager]
    command: "redis-server /mapic/config/redis.tokens.conf"
    networks:
      mapic:
        aliases:
          - redistokens.docker

  redistemp:
    image: redis:latest
    volumes:
      - ${MAPIC_CONFIG_FOLDER}:/mapic/config
    deploy:
      placement:
        constraints: [node.labels.domain_node == true]
        # constraints: [node.role == manager]
    command: "redis-server /mapic/config/redis.temp.conf"
    networks:
      mapic:
        aliases:
          - redistemp.docker

  mongo: 
    image: mapic/mongo:latest
    volumes:
      - ${MAPIC_CONFIG_FOLDER}:/mapic/config
      - mongo_store_localhost:/data/db
    deploy:
      placement:
        constraints: [node.labels.domain_node == true]
        # constraints: [node.role == manager]
    networks:
      mapic:
        aliases:
          - mongo.docker

  postgis:
    image: mapic/postgis:latest
    volumes:
      - ${MAPIC_CONFIG_FOLDER}:/mapic/config
      - postgis_store_localhost:/var/lib/postgresql
    deploy:
      placement:
        constraints: [node.labels.domain_node == true]
        # constraints: [node.role == manager]
    networks:
      mapic:
        aliases:
          - postgis.docker
  